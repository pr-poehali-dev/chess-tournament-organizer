import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Separator } from '@/components/ui/separator';
import Icon from '@/components/ui/icon';

interface Tournament {
  id: string;
  name: string;
  description: string;
  status: 'waiting' | 'active' | 'finished';
  participants: string[];
  startDate: string;
  format: 'single_elimination' | 'round_robin' | 'swiss';
  timeControl: string;
}

interface TournamentStanding {
  playerId: string;
  playerName: string;
  points: number;
  wins: number;
  losses: number;
  draws: number;
  games: number;
  performance: number;
}

interface Match {
  id: string;
  player1: string;
  player2: string;
  result: '1-0' | '0-1' | '1/2-1/2' | null;
  round: number;
  status: 'scheduled' | 'in_progress' | 'finished';
}

interface ChatMessage {
  id: string;
  username: string;
  message: string;
  timestamp: string;
  isAdmin: boolean;
}

interface TournamentRoomProps {
  tournamentId: string;
  currentUser: string;
  onBack: () => void;
}

const TournamentRoom: React.FC<TournamentRoomProps> = ({
  tournamentId,
  currentUser,
  onBack
}) => {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const [tournament, setTournament] = useState<Tournament | null>(null);
  const [standings, setStandings] = useState<TournamentStanding[]>([]);
  const [matches, setMatches] = useState<Match[]>([]);
  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([]);
  const [newMessage, setNewMessage] = useState('');
  const [currentRound, setCurrentRound] = useState(4);
  const [isAuthorized, setIsAuthorized] = useState(false);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞
  useEffect(() => {
    checkAuthorization();
    loadTournamentData();
    loadChatMessages();
    
    // –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(() => {
      loadTournamentData();
      loadChatMessages();
    }, 30000);

    return () => clearInterval(interval);
  }, [tournamentId, currentUser]);

  const checkAuthorization = () => {
    // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const mockTournament: Tournament = {
      id: tournamentId,
      name: "–ß–µ–º–ø–∏–æ–Ω–∞—Ç –ö–ª—É–±–∞ ¬´–ë–µ–ª–∞—è –õ–∞–¥—å—è¬ª",
      description: "–®–≤–µ–π—Ü–∞—Ä—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞, 9 —Ç—É—Ä–æ–≤. –ö–æ–Ω—Ç—Ä–æ–ª—å –≤—Ä–µ–º–µ–Ω–∏: 15 –º–∏–Ω—É—Ç + 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ö–æ–¥.",
      status: 'active',
      participants: [
        currentUser, 
        '–ü–µ—Ç—Ä–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á', 
        '–ò–≤–∞–Ω–æ–≤–∞ –ú–∞—Ä–∏—è –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞', 
        '–°–∏–¥–æ—Ä–æ–≤ –î–º–∏—Ç—Ä–∏–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á', 
        '–ö–æ–∑–ª–æ–≤–∞ –ï–ª–µ–Ω–∞ –ü–∞–≤–ª–æ–≤–Ω–∞', 
        '–ú–æ—Ä–æ–∑–æ–≤ –ò–≥–æ—Ä—å –ú–∏—Ö–∞–π–ª–æ–≤–∏—á', 
        '–õ–µ–±–µ–¥–µ–≤–∞ –ê–Ω–Ω–∞ –õ–µ–æ–Ω–∏–¥–æ–≤–Ω–∞', 
        '–ù–æ–≤–∏–∫–æ–≤ –°–µ—Ä–≥–µ–π –ù–∏–∫–æ–ª–∞–µ–≤–∏—á',
        '–í–æ–ª–∫–æ–≤ –ê–Ω–¥—Ä–µ–π –ü–µ—Ç—Ä–æ–≤–∏—á',
        '–°–º–∏—Ä–Ω–æ–≤–∞ –û–ª—å–≥–∞ –í–∏–∫—Ç–æ—Ä–æ–≤–Ω–∞'
      ],
      startDate: new Date().toISOString(),
      format: 'swiss',
      timeControl: '15+10'
    };

    if (mockTournament.participants.includes(currentUser)) {
      setIsAuthorized(true);
      setTournament(mockTournament);
    } else {
      setIsAuthorized(false);
    }
  };

  const loadTournamentData = () => {
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É isAuthorized, —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–≥–¥–∞ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å

    // –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —Ç—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ—Å–ª–µ 3 —Ç—É—Ä–æ–≤ (10 –∏–≥—Ä–æ–∫–æ–≤)
    const mockStandings: TournamentStanding[] = [
      {
        playerId: '–ü–µ—Ç—Ä–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á',
        playerName: '–ü–µ—Ç—Ä–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á',
        points: 3.0,
        wins: 3,
        losses: 0,
        draws: 0,
        games: 3,
        performance: 2200
      },
      {
        playerId: '–ò–≤–∞–Ω–æ–≤–∞ –ú–∞—Ä–∏—è –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞',
        playerName: '–ò–≤–∞–Ω–æ–≤–∞ –ú–∞—Ä–∏—è –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞',
        points: 2.5,
        wins: 2,
        losses: 0,
        draws: 1,
        games: 3,
        performance: 2050
      },
      {
        playerId: currentUser,
        playerName: currentUser,
        points: 2.5,
        wins: 2,
        losses: 0,
        draws: 1,
        games: 3,
        performance: 2040
      },
      {
        playerId: '–°–∏–¥–æ—Ä–æ–≤ –î–º–∏—Ç—Ä–∏–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á',
        playerName: '–°–∏–¥–æ—Ä–æ–≤ –î–º–∏—Ç—Ä–∏–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á',
        points: 2.0,
        wins: 2,
        losses: 1,
        draws: 0,
        games: 3,
        performance: 1900
      },
      {
        playerId: '–ú–æ—Ä–æ–∑–æ–≤ –ò–≥–æ—Ä—å –ú–∏—Ö–∞–π–ª–æ–≤–∏—á',
        playerName: '–ú–æ—Ä–æ–∑–æ–≤ –ò–≥–æ—Ä—å –ú–∏—Ö–∞–π–ª–æ–≤–∏—á',
        points: 2.0,
        wins: 1,
        losses: 0,
        draws: 2,
        games: 3,
        performance: 1880
      },
      {
        playerId: '–ö–æ–∑–ª–æ–≤–∞ –ï–ª–µ–Ω–∞ –ü–∞–≤–ª–æ–≤–Ω–∞',
        playerName: '–ö–æ–∑–ª–æ–≤–∞ –ï–ª–µ–Ω–∞ –ü–∞–≤–ª–æ–≤–Ω–∞',
        points: 1.5,
        wins: 1,
        losses: 1,
        draws: 1,
        games: 3,
        performance: 1750
      },
      {
        playerId: '–í–æ–ª–∫–æ–≤ –ê–Ω–¥—Ä–µ–π –ü–µ—Ç—Ä–æ–≤–∏—á',
        playerName: '–í–æ–ª–∫–æ–≤ –ê–Ω–¥—Ä–µ–π –ü–µ—Ç—Ä–æ–≤–∏—á',
        points: 1.5,
        wins: 1,
        losses: 1,
        draws: 1,
        games: 3,
        performance: 1720
      },
      {
        playerId: '–õ–µ–±–µ–¥–µ–≤–∞ –ê–Ω–Ω–∞ –õ–µ–æ–Ω–∏–¥–æ–≤–Ω–∞',
        playerName: '–õ–µ–±–µ–¥–µ–≤–∞ –ê–Ω–Ω–∞ –õ–µ–æ–Ω–∏–¥–æ–≤–Ω–∞',
        points: 1.0,
        wins: 1,
        losses: 2,
        draws: 0,
        games: 3,
        performance: 1650
      },
      {
        playerId: '–ù–æ–≤–∏–∫–æ–≤ –°–µ—Ä–≥–µ–π –ù–∏–∫–æ–ª–∞–µ–≤–∏—á',
        playerName: '–ù–æ–≤–∏–∫–æ–≤ –°–µ—Ä–≥–µ–π –ù–∏–∫–æ–ª–∞–µ–≤–∏—á',
        points: 0.5,
        wins: 0,
        losses: 2,
        draws: 1,
        games: 3,
        performance: 1500
      },
      {
        playerId: '–°–º–∏—Ä–Ω–æ–≤–∞ –û–ª—å–≥–∞ –í–∏–∫—Ç–æ—Ä–æ–≤–Ω–∞',
        playerName: '–°–º–∏—Ä–Ω–æ–≤–∞ –û–ª—å–≥–∞ –í–∏–∫—Ç–æ—Ä–æ–≤–Ω–∞',
        points: 0.0,
        wins: 0,
        losses: 3,
        draws: 0,
        games: 3,
        performance: 1400
      }
    ];

    setStandings(mockStandings);

    // –ú–∞—Ç—á–∏ 4-–≥–æ —Ç—É—Ä–∞ (—Ç–µ–∫—É—â–µ–≥–æ)
    const mockMatches: Match[] = [
      {
        id: '1',
        player1: '–ü–µ—Ç—Ä–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á',
        player2: '–ò–≤–∞–Ω–æ–≤–∞ –ú–∞—Ä–∏—è –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞',
        result: null,
        round: currentRound,
        status: 'in_progress'
      },
      {
        id: '2',
        player1: currentUser,
        player2: '–°–∏–¥–æ—Ä–æ–≤ –î–º–∏—Ç—Ä–∏–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á',
        result: null,
        round: currentRound,
        status: 'in_progress'
      },
      {
        id: '3',
        player1: '–ú–æ—Ä–æ–∑–æ–≤ –ò–≥–æ—Ä—å –ú–∏—Ö–∞–π–ª–æ–≤–∏—á',
        player2: '–ö–æ–∑–ª–æ–≤–∞ –ï–ª–µ–Ω–∞ –ü–∞–≤–ª–æ–≤–Ω–∞',
        result: '1/2-1/2',
        round: currentRound,
        status: 'finished'
      },
      {
        id: '4',
        player1: '–í–æ–ª–∫–æ–≤ –ê–Ω–¥—Ä–µ–π –ü–µ—Ç—Ä–æ–≤–∏—á',
        player2: '–õ–µ–±–µ–¥–µ–≤–∞ –ê–Ω–Ω–∞ –õ–µ–æ–Ω–∏–¥–æ–≤–Ω–∞',
        result: '1-0',
        round: currentRound,
        status: 'finished'
      },
      {
        id: '5',
        player1: '–ù–æ–≤–∏–∫–æ–≤ –°–µ—Ä–≥–µ–π –ù–∏–∫–æ–ª–∞–µ–≤–∏—á',
        player2: '–°–º–∏—Ä–Ω–æ–≤–∞ –û–ª—å–≥–∞ –í–∏–∫—Ç–æ—Ä–æ–≤–Ω–∞',
        result: null,
        round: currentRound,
        status: 'scheduled'
      }
    ];

    setMatches(mockMatches);
  };

  const loadChatMessages = () => {
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É isAuthorized, —Ç–∞–∫ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å

    const mockMessages: ChatMessage[] = [
      {
        id: '1',
        username: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        message: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–Ω—ã–π –∑–∞–ª! –£–¥–∞—á–∏ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º!',
        timestamp: new Date(Date.now() - 7200000).toISOString(),
        isAdmin: true
      },
      {
        id: '2',
        username: '–ü–µ—Ç—Ä–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á',
        message: '–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! –•–æ—Ä–æ—à–∏–π —Ç—É—Ä–Ω–∏—Ä –ø–æ–ª—É—á–∞–µ—Ç—Å—è üí™',
        timestamp: new Date(Date.now() - 3600000).toISOString(),
        isAdmin: false
      },
      {
        id: '3',
        username: '–ò–≤–∞–Ω–æ–≤–∞ –ú–∞—Ä–∏—è –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞',
        message: '–î–∞, –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –±–æ—Ä—å–±–∞ –≤ –ª–∏–¥–∏—Ä—É—é—â–µ–π –≥—Ä—É–ø–ø–µ!',
        timestamp: new Date(Date.now() - 2700000).toISOString(),
        isAdmin: false
      },
      {
        id: '4',
        username: '–°–∏–¥–æ—Ä–æ–≤ –î–º–∏—Ç—Ä–∏–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á',
        message: '–ö—Ç–æ-—Ç–æ –ø–æ–º–Ω–∏—Ç –≤—Ä–µ–º—è –ø–∞—Ä—Ç–∏–π? –°–∫–æ–ª—å–∫–æ —É –Ω–∞—Å –æ—Å—Ç–∞–µ—Ç—Å—è?',
        timestamp: new Date(Date.now() - 1800000).toISOString(),
        isAdmin: false
      },
      {
        id: '5',
        username: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        message: '15 –º–∏–Ω—É—Ç + 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ö–æ–¥. –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤—Ä–µ–º–µ–Ω–µ–º!',
        timestamp: new Date(Date.now() - 1500000).toISOString(),
        isAdmin: true
      },
      {
        id: '6',
        username: '–ú–æ—Ä–æ–∑–æ–≤ –ò–≥–æ—Ä—å –ú–∏—Ö–∞–π–ª–æ–≤–∏—á',
        message: '–°–ø–∞—Å–∏–±–æ –∑–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –£–¥–∞—á–∏ –≤—Å–µ–º –≤ 4-–º —Ç—É—Ä–µ üèÜ',
        timestamp: new Date(Date.now() - 900000).toISOString(),
        isAdmin: false
      },
      {
        id: '7',
        username: '–ö–æ–∑–ª–æ–≤–∞ –ï–ª–µ–Ω–∞ –ü–∞–≤–ª–æ–≤–Ω–∞',
        message: '–ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–π —Ç—É—Ä?',
        timestamp: new Date(Date.now() - 300000).toISOString(),
        isAdmin: false
      },
      {
        id: '8',
        username: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        message: '5-–π —Ç—É—Ä –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–∞—Ä—Ç–∏–π —Ç–µ–∫—É—â–µ–≥–æ —Ç—É—Ä–∞.',
        timestamp: new Date(Date.now() - 120000).toISOString(),
        isAdmin: true
      }
    ];

    setChatMessages(mockMessages);
  };

  const sendMessage = () => {
    if (!newMessage.trim()) return;

    const message: ChatMessage = {
      id: Date.now().toString(),
      username: currentUser,
      message: newMessage,
      timestamp: new Date().toISOString(),
      isAdmin: false
    };

    setChatMessages(prev => [...prev, message]);
    setNewMessage('');
  };

  const formatTime = (timestamp: string) => {
    return new Date(timestamp).toLocaleTimeString('ru-RU', {
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –§–ò–û –¥–æ —Ñ–∞–º–∏–ª–∏–∏ –∏ –∏–º–µ–Ω–∏
  const formatUsername = (fullName: string) => {
    if (fullName === '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä') return fullName;
    
    const parts = fullName.trim().split(/\s+/);
    if (parts.length >= 2) {
      return `${parts[0]} ${parts[1]}`; // –§–∞–º–∏–ª–∏—è –ò–º—è
    }
    return fullName; // –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 2 —á–∞—Å—Ç–µ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  };

  const getStatusBadge = (status: Tournament['status']) => {
    const statusMap = {
      waiting: { label: '–û–∂–∏–¥–∞–Ω–∏–µ', variant: 'secondary' as const, className: '' },
      active: { label: '–ê–∫—Ç–∏–≤–Ω—ã–π', variant: 'default' as const, className: 'bg-primary text-black' },
      finished: { label: '–ó–∞–≤–µ—Ä—à—ë–Ω', variant: 'outline' as const, className: '' }
    };
    return statusMap[status];
  };

  if (!isAuthorized) {
    return (
      <div className="min-h-screen bg-white flex items-center justify-center">
        <Card className="w-full max-w-md shadow-lg">
          <CardHeader className="text-center">
            <Icon name="Lock" size={48} className="mx-auto mb-4 text-red-500" />
            <CardTitle className="text-xl text-gray-900">–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω</CardTitle>
          </CardHeader>
          <CardContent className="text-center space-y-4">
            <p className="text-gray-600">
              –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
            </p>
            <Button onClick={onBack} variant="outline" className="w-full">
              <Icon name="ArrowLeft" size={16} className="mr-2" />
              –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç—É—Ä–Ω–∏—Ä–∞–º
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (!tournament) {
    return (
      <div className="min-h-screen bg-white flex items-center justify-center">
        <div className="text-gray-900 text-center">
          <Icon name="Loader2" size={48} className="animate-spin mx-auto mb-4 text-primary" />
          <p>–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—É—Ä–Ω–∏—Ä–Ω—ã–π –∑–∞–ª...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-white text-gray-900 p-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex items-center justify-between mb-6">
        <Button
          onClick={onBack}
          variant="outline"
          size="sm"
          className="text-gray-700 hover:bg-gray-50"
        >
          <Icon name="ArrowLeft" size={16} className="mr-2" />
          –ö —Ç—É—Ä–Ω–∏—Ä–∞–º
        </Button>
        <div className="flex items-center gap-2 text-gray-600">
          <Icon name="Users" size={20} />
          <span className="text-sm">{tournament.participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</span>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-5 gap-6">
        {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ + –ß–∞—Ç (20%) */}
        <div className="lg:col-span-1 space-y-6">
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ */}
          <Card className="shadow-lg">
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle className="text-2xl text-gray-900 flex items-center gap-2">
                <Icon name="Trophy" size={24} className="text-primary" />
                {tournament.name}
              </CardTitle>
              <Badge 
                variant={getStatusBadge(tournament.status).variant}
                className={getStatusBadge(tournament.status).className}
              >
                {getStatusBadge(tournament.status).label}
              </Badge>
            </div>
          </CardHeader>
          <CardContent>
            <p className="text-gray-600 mb-4">{tournament.description}</p>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
              <div>
                <span className="text-gray-500">–§–æ—Ä–º–∞—Ç:</span>
                <p className="text-gray-900 font-medium">
                  {tournament.format === 'round_robin' ? '–ö—Ä—É–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞' : 
                   tournament.format === 'swiss' ? '–®–≤–µ–π—Ü–∞—Ä—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞' : '–ù–∞ –≤—ã–±—ã–≤–∞–Ω–∏–µ'}
                </p>
              </div>
              <div>
                <span className="text-gray-500">–ö–æ–Ω—Ç—Ä–æ–ª—å –≤—Ä–µ–º–µ–Ω–∏:</span>
                <p className="text-gray-900 font-medium">{tournament.timeControl}</p>
              </div>
              <div>
                <span className="text-gray-500">–¢—É—Ä:</span>
                <p className="text-gray-900 font-medium">{currentRound}</p>
              </div>
              <div>
                <span className="text-gray-500">–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</span>
                <p className="text-gray-900 font-medium">{tournament.participants.length}</p>
              </div>
            </div>
          </CardContent>
        </Card>

          {/* –ß–∞—Ç */}
          <Card className="shadow-lg">
            <CardHeader>
              <CardTitle className="text-lg text-gray-900 flex items-center gap-2">
                <Icon name="MessageSquare" size={20} className="text-primary" />
                –ß–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
              </CardTitle>
            </CardHeader>
            <CardContent className="p-0">
              <ScrollArea className="h-64 p-4">
                <div className="space-y-3">
                  {chatMessages.map((msg) => (
                    <div key={msg.id} className="space-y-1">
                      <div className="flex items-center gap-2">
                        <span className={`text-sm font-medium ${
                          msg.isAdmin ? 'text-primary' : 'text-blue-600'
                        }`}>
                          {msg.isAdmin && <Icon name="Shield" size={14} className="inline mr-1" />}
                          {formatUsername(msg.username)}
                        </span>
                        <span className="text-xs text-gray-400">
                          {formatTime(msg.timestamp)}
                        </span>
                      </div>
                      <p className="text-gray-700 text-sm">{msg.message}</p>
                    </div>
                  ))}
                </div>
              </ScrollArea>
              <Separator />
              <div className="p-4 flex gap-2">
                <Input
                  value={newMessage}
                  onChange={(e) => setNewMessage(e.target.value)}
                  placeholder="–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                  className="bg-white border-gray-200"
                  onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
                />
                <Button
                  onClick={sendMessage}
                  size="sm"
                  className="shrink-0 bg-primary hover:bg-primary/90 text-black"
                  disabled={!newMessage.trim()}
                >
                  <Icon name="Send" size={16} />
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ */}
        <Card className="lg:col-span-3 shadow-lg">
          <CardHeader>
            <CardTitle className="text-lg text-gray-900 flex items-center gap-2">
              <Icon name="BarChart3" size={20} className="text-primary" />
              –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
            </CardTitle>
          </CardHeader>
          <CardContent className="p-0">
            <ScrollArea className="h-80">
              <div className="p-4">
                <div className="grid grid-cols-7 gap-2 text-sm font-medium text-gray-500 mb-3">
                  <div>–ú–µ—Å—Ç–æ</div>
                  <div>–ò–≥—Ä–æ–∫</div>
                  <div>–û—á–∫–∏</div>
                  <div>–ü–∞—Ä—Ç–∏–∏</div>
                  <div>+/-/=</div>
                  <div>–†–µ–π—Ç–∏–Ω–≥</div>
                  <div>–ü–µ—Ä—Ñ.</div>
                </div>
                <Separator className="mb-3" />
                {standings.map((player, index) => (
                  <div
                    key={player.playerId}
                    className={`grid grid-cols-7 gap-2 text-sm py-2 rounded px-2 ${
                      player.playerId === currentUser ? 'bg-primary/10' : ''
                    }`}
                  >
                    <div className="text-gray-900 font-medium">{index + 1}</div>
                    <div className="text-gray-900 font-medium">
                      {formatUsername(player.playerName)}
                      {player.playerId === currentUser && (
                        <Badge className="ml-2 text-xs bg-primary text-black">–í—ã</Badge>
                      )}
                    </div>
                    <div className="text-gray-900 font-medium">{player.points.toFixed(1)}</div>
                    <div className="text-gray-600">{player.games}</div>
                    <div className="text-gray-600">
                      <span className="text-green-600">{player.wins}</span>/
                      <span className="text-red-600">{player.losses}</span>/
                      <span className="text-orange-500">{player.draws}</span>
                    </div>
                    <div className="text-gray-600">1650</div>
                    <div className="text-gray-600">{player.performance}</div>
                  </div>
                ))}
              </div>
            </ScrollArea>
          </CardContent>
        </Card>

        {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –¢–µ–∫—É—â–∏–µ –º–∞—Ç—á–∏ */}
        <Card className="lg:col-span-1 shadow-lg">
            <CardHeader>
              <CardTitle className="text-lg text-gray-900 flex items-center gap-2">
                <Icon name="Clock" size={20} className="text-primary" />
                –¢–µ–∫—É—â–∏–π —Ç—É—Ä
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {matches.map((match) => (
                  <div
                    key={match.id}
                    className="p-3 bg-gray-50 rounded-lg border border-gray-200"
                  >
                    <div className="flex items-center justify-between mb-2">
                      <div className="text-sm text-gray-500">–¢—É—Ä {match.round}</div>
                      <Badge
                        variant={match.status === 'in_progress' ? 'default' : 'secondary'}
                        className={`text-xs ${
                          match.status === 'in_progress' ? 'bg-primary text-black' : ''
                        }`}
                      >
                        {match.status === 'in_progress' ? '–ò–≥—Ä–∞—é—Ç' : 
                         match.status === 'finished' ? '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' : '–û–∂–∏–¥–∞–Ω–∏–µ'}
                      </Badge>
                    </div>
                    <div className="flex items-center justify-between">
                      <div className="text-gray-900 text-sm">
                        <div>{formatUsername(match.player1)}</div>
                        <div className="text-gray-500">vs</div>
                        <div>{formatUsername(match.player2)}</div>
                      </div>
                      <div className="text-right">
                        {match.result ? (
                          <div className="text-gray-900 font-medium">{match.result}</div>
                        ) : (
                          <div className="text-primary text-sm animate-pulse">–í –∏–≥—Ä–µ...</div>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
      </div>
    </div>
  );
};

export default TournamentRoom;